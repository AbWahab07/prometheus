/**
 * Media-query generator
 * 
 * Iterates over the list of $breakpoints defined in variables.scss
 * If the argument (i.e. $media-query) is found within the $breakpoints list, then create a media-query for it
 * For example:
 * - In $breakpoints is a $breakpoint == $medium-up '(min-width: #{$grid-medium})'
 * - When this $breakpoint is iterated over, $medium-up is assigned to $name and '(min-width: 46.85rem)' is assigned to $declaration
 * - The value in $declaration is then used to create the media query
 *  - i.e. @media only screen and (min-width: 46.85rem) { }
 *
 * Usage:
 * .selector {
 *   @include media-query($medium-up) {
 *    color: red;
 *   }
 * }
 */

@mixin media-query($media-query) {
  $breakpoint-found: false;

  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $media-query == $name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }

  }
}

/**
 * Page-width
 *
 * Used to set a maximum width to a container and add padding ot it to center it
 * Accepts $padding as an argument (default is set to $gutter-large)
 *
 * Usage:
 * .selector {
 *  @include page-width(0 1rem);
 * }
 */

@mixin page-width($padding: 0 $gutter-large, $max-width: $page-width) {
  max-width: $page-width;
  margin: 0 auto;
  padding: $padding;
}

/**
 * This mixin can be used to set the object-fit:
 * @include object-fit(contain);
 * or object-fit and object-position:
 * @include object-fit(cover, top);
 */

@mixin object-fit($fit: fill, $position: null) {
  object-fit: $fit;

  @if position {
    object-position: $position;
    font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  } @else {
    font-family: 'object-fit: #{$fit}';
  }
}

/**
 * Forces an element to self-clear its children
 *
 * Usage:
 * .selector {
 *  @include clearfix; 
 * }
 */

/* stylelint-disable */
@mixin clearfix() {
  *zoom: 1;

  &::after {
    content: '';
    display: table;
    clear: both;
  }
}
/* stylelint-enable */

/**
 * Hide element but make it accessible to screen readers
 *
 * Usage:
 *  .selector {
 *   @include visually-hidden;
 *  }
 */

@mixin visually-hidden {
  // stylelint-disable-next-line
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
  // stylelint-disable-next-line
  word-wrap: normal !important;
}

/**
 * Reverse the properties applied by @include visually-hidden
 *
 * Accepts:
 * - $position: {String} Positioning method for element
 *
 * Usage:
 *  .selector {
 *   @include visually-shown(relative);
 *  }
 */

@mixin visually-shown($position: inherit) {
  // stylelint-disable-next-line
  position: $position !important;
  overflow: auto;
  width: auto;
  height: auto;
  margin: 0;
  clip: auto;
}

/**
 * Adds an overlay as a pseudo-selector to any element
 *
 * Accepts:
 * - $z-index: {Number} Property z-index for the overlay
 *
 * Usage:
 *  .selector {
 *   @include overlay(2);
 *  }
 */

@mixin overlay($z-index: null) {
  &::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: $color-overlay;
    pointer-events: none;

    @if $z-index {
      z-index: $z-index;
    }
  }
}

/**
 * Defines a default placeholder text color/opacity
 *
 * Usage:
 * .selector {
 *  @include placeholder-text(#000, 0.7);
 * }
 */

 @mixin placeholder-text($color: $color-form-text, $opacity: 0.6) {
   color: $color;
   opacity: $opacity;
 }

 /**
 * Sets a linear-gradient 
 *
 * Usage:
 * .selector {
 *  @include gradient(#000, 0.7);
 * }
 */

 @mixin gradient($side, $from, $to) {
   background: linear-gradient(to $side, $from 0%, $to 100%);
 }

