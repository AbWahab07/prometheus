/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* /* stylelint-disable */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0; }

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none; }

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none; }

/* Settings */
/* Colors */
/* Typography */
/* Grid */
/* Misc */
/* Tools */
/**
 * Media-query generator
 * 
 * Iterates over the list of $breakpoints defined in variables.scss
 * If the argument (i.e. $media-query) is found within the $breakpoints list, then create a media-query for it
 * For example:
 * - In $breakpoints is a $breakpoint == $medium-up '(min-width: 46.85rem)'
 * - When this $breakpoint is iterated over, $medium-up is assigned to $name and '(min-width: 46.85rem)' is assigned to $declaration
 * - The value in $declaration is then used to create the media query
 *  - i.e. @media only screen and (min-width: 46.85rem) { }
 *
 * Usage:
 * .selector {
 *   @include media-query($medium-up) {
 *    color: red;
 *   }
 * }
 */
/**
 * Page-width
 *
 * Used to set a maximum width to a container and add padding ot it to center it
 * Accepts $padding as an argument (default is set to $gutter-large)
 *
 * Usage:
 * .selector {
 *  @include page-width(0 1rem);
 * }
 */
/**
 * This mixin can be used to set the object-fit:
 * @include object-fit(contain);
 * or object-fit and object-position:
 * @include object-fit(cover, top);
 */
/**
 * Forces an element to self-clear its children
 *
 * Usage:
 * .selector {
 *  @include clearfix; 
 * }
 */
/* stylelint-disable */
/* stylelint-enable */
/**
 * Hide element but make it accessible to screen readers
 *
 * Usage:
 *  .selector {
 *   @include visually-hidden;
 *  }
 */
/**
 * Reverse the properties applied by @include visually-hidden
 *
 * Accepts:
 * - $position: {String} Positioning method for element
 *
 * Usage:
 *  .selector {
 *   @include visually-shown(relative);
 *  }
 */
/**
 * Adds an overlay as a pseudo-selector to any element
 *
 * Accepts:
 * - $z-index: {Number} Property z-index for the overlay
 *
 * Usage:
 *  .selector {
 *   @include overlay(2);
 *  }
 */
/**
 * Defines a default placeholder text color/opacity
 *
 * Usage:
 * .selector {
 *  @include placeholder-text(#000, 0.7);
 * }
 */
/**
 * Sets a linear-gradient 
 *
 * Usage:
 * .selector {
 *  @include gradient(#000, 0.7);
 * }
 */
/* stylelint-disable */
#preview-bar-iframe {
  display: none !important; }

/* stylelint-enable */
html {
  font-size: 62.5%; }

body {
  max-width: 1180px;
  margin: 0 auto;
  padding: 0 3rem;
  background-color: var(--color-background);
  color: var(--color-primary);
  border: solid 2px var(--color-borders);
  font-family: var(--font-body);
  font-style: var(--font-body-style);
  font-weight: var(--font-body-weight);
  font-size: var(--font-size-base-primary); }
  @media only screen and (max-width: 45.85rem) {
    body {
      background-color: var(--color-borders); } }

h1 {
  font-family: var(--font-heading);
  font-style: var(--font-heading-style);
  font-weight: var(--font-heading-weight);
  color: var(--color-headings);
  font-size: var(--font-size-base-secondary); }

a {
  font-family: var(--font-body);
  font-style: var(--font-body-style);
  font-weight: var(--font-body-bold);
  text-decoration: none;
  color: var(--color-link); }
  a:hover {
    color: var(--color-link-hover); }

/* stylelint-disable-next-line */
.collection-products {
  position: relative;
  background: linear-gradient(to right, var(--color-background) 0%, var(--color-borders) 100%);
  border: solid 1px var(--color-borders); }
  .collection-products::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: var(--color-overlay);
    pointer-events: none;
    z-index: 2; }

.img {
  width: 360px;
  height: 240px;
  -o-object-fit: cover;
     object-fit: cover;
  -o-object-position: top;
     object-position: top;
  font-family: "object-fit: cover; object-position: top";
  transition: opacity 0.5s ease-in; }
  .img:hover {
    opacity: var(--color-overlay-opacity); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
